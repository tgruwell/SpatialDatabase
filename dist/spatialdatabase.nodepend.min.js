var SpatialDatabase=function(a){this.objects={};this.records={};this.rtreeNodeWidth=20;for(var b in a)this[b]=a[b];this.index=RTree(this.rtreeNodeWidth);this.uid=0};SpatialDatabase.prototype.put=function(a){var b=!1;"undefined"==typeof a.id?a.id=this.newID():"undefined"!=typeof this.objects[a.id]&&(b=!0);var c=a.id;b&&this.index.remove(this.objects[c].boundingRect,c);b=this.initializeObject(a);this.index.insert(b.boundingRect,c);this.objects[c]=b;this.records[c]=a;return c};
SpatialDatabase.prototype["delete"]=function(a){this.index.remove(this.objects[a].boundingRect,a);delete this.objects[a]};
SpatialDatabase.prototype.query=function(a){var b=[],b=[],c={};if("undefined"!=typeof a.intersecting){a.intersecting=this.initializeObject(a.intersecting);for(var b=this.getByRect(a.intersecting.boundingRect),d=b.length-1;0<=d;d--){var e=this.test.intersection(this.objects[b[d]],a.intersecting);e.success?c[b[d]]=e:b.splice(d,1)}}else for(d in this.objects)b.push(d);b=this.filterResults(b,a);return this.expandResults(b,c)};
SpatialDatabase.prototype.initializeObject=function(a){var b={id:a.id,points:[],edges:[],center:null,rotated:!1,boundingRect:{},type:null};switch(a.type){case "point":b.points.push($V([a.x,a.y,0]));b.center=$V([a.x,a.y,0]);b.type=this.objectTypes.point;break;case "lineseg":if("undefined"==typeof a.w||1>=a.w)b.points.push($V([a.p1.x,a.p1.y,0])),b.points.push($V([a.p2.x,a.p2.y,0])),b.center=$V([(a.p1.x+a.p2.x)/2,(a.p1.y+a.p2.y)/2,0]),b.type=this.objectTypes.lineseg;else{var c=$V([a.p1.x,a.p1.y,0]),
d=$V([a.p2.x,a.p2.y,0]),e=c.distanceFrom(d);"undefined"!=typeof a.encloseEnds&&a.encloseEnds&&(e+=a.w);c=Math.atan2(d.e(2)-c.e(2),d.e(1)-c.e(1));b.center=$V([(a.p1.x+a.p2.x)/2,(a.p1.y+a.p2.y)/2,0]);var d=b.center.e(1)-e/2,f=b.center.e(2)-a.w/2,g=a.w;b.points.push($V([d,f,0]));b.points.push($V([d+e,f,0]));b.points.push($V([d+e,f+g,0]));b.points.push($V([d,f+g,0]));for(e=0;e<b.points.length;e++)b.points[e]=b.points[e].rotate(c,this.pointToAxis(b.center));b.type=this.objectTypes.polygon}break;case "rect":b.points.push($V([a.x,
a.y,0]));b.points.push($V([a.x+a.w,a.y,0]));b.points.push($V([a.x+a.w,a.y+a.h,0]));b.points.push($V([a.x,a.y+a.h,0]));b.center=$V([a.x+a.w/2,a.y+a.h/2,0]);b.type=this.objectTypes.polygon;break;case "polygon":for(e=d=c=0;e<a.points.length;e++)c+=a.points[e].x,d+=a.points[e].y,b.points.push($V([a.points[e].x,a.points[e].y,0]));b.center=$V([c/2,d/2,0]);b.type=this.objectTypes.polygon;break;case "circle":b.points.push($V([a.x,a.y,0])),b.radius=a.r,b.center=b.points[0],b.type=this.objectTypes.circle}if("undefined"!=
typeof a.rot)for(b.rotated=!0,d=this.pointToAxis(b.center),c=a.rot,"undefined"!=typeof a.rot.a&&(d=this.pointToAxis($V([a.rot.x,a.rot.y])),c=a.rot.a),b.center=b.center.rotate(c,d),e=0;e<b.points.length;e++)b.points[e]=b.points[e].rotate(c,d);1<b.points.length&&(b.edges=this.pointsToEdges(b.points));switch(b.type){case this.objectTypes.point:b.boundingRect={x:b.points[0].e(1),y:b.points[0].e(2),w:1,h:1};break;case this.objectTypes.lineseg:a=Math.min(b.points[0].e(1),b.points[1].e(1));c=Math.min(b.points[0].e(2),
b.points[1].e(2));d=Math.max(b.points[0].e(1),b.points[1].e(1));f=Math.max(b.points[0].e(2),b.points[1].e(2));b.boundingRect={x:a,y:c,w:d-a,h:f-c};break;case this.objectTypes.polygon:for(e=f=d=c=a=0;e<b.points.length;e++)a=Math.min(a,b.points[e].e(1)),c=Math.min(c,b.points[e].e(2)),d=Math.max(d,b.points[e].e(1)),f=Math.max(f,b.points[e].e(2));b.boundingRect={x:a,y:c,w:d-a,h:f-c};break;case this.objectTypes.circle:b.boundingRect={x:b.points[0].e(1)-b.radius,y:b.points[0].e(2)-b.radius,w:2*b.radius,
h:2*b.radius}}return b};SpatialDatabase.prototype.pointsToEdges=function(a){for(var b=[],c=0;c<a.length;c++)c<a.length-1?b.push({type:this.objectTypes.lineseg,points:[a[c],a[c+1]],line:$L(a[c],a[c+1].subtract(a[c]).toUnitVector())}):2<a.length&&b.push({type:this.objectTypes.lineseg,points:[a[c],a[0]],line:$L(a[c],a[c].subtract(a[0]).toUnitVector())});return b};SpatialDatabase.prototype.getByRect=function(a){return this.index.search(a)};
SpatialDatabase.prototype.getByPoint=function(a){return this.getByRect({x:a.x,y:a.y,w:1,h:1})};SpatialDatabase.prototype.expandResults=function(a,b){for(var c=[],d=0;d<a.length;d++)c.push({record:this.records[a[d]],details:b[a[d]]});return c};SpatialDatabase.prototype.filterResults=function(a,b){var c=[],d=[],e;for(e in b)"intersecting"!=e&&d.push(e);if(d.length){for(var f=0;f<a.length;f++){for(var g=!0,h=0;h<d.length;h++)e=d[h],this.records[a[f]][e]!=b[e]&&(g=!1);g&&c.push(a[f])}return c}return a};
SpatialDatabase.prototype.pointToAxis=function(a){return $L($V([a.e(1),a.e(2),0]),$V([0,0,1]))};SpatialDatabase.prototype.getObjectData=function(a){return this.objects[a]};SpatialDatabase.prototype.newID=function(){return++this.uid};SpatialDatabase.prototype.objectTypes={point:0,line:1,lineseg:2,polygon:3,circle:4};
SpatialDatabase.prototype.test={intersection:function(a,b){if(a.type>b.type){var c=b;b=a;a=c}c=SpatialDatabase.prototype.objectTypes;switch(a.type){case c.point:switch(b.type){case c.point:return this.point_point(a,b);case c.lineseg:return this.point_linseg(a,b);case c.polygon:return this.point_polygon(a,b);case c.circle:return this.point_circle(a,b)}break;case c.lineseg:switch(b.type){case c.lineseg:return this.lineseg_lineseg(a,b);case c.polygon:return this.lineseg_polygon(a,b);case c.circle:return this.lineseg_circle(a,
b)}break;case c.polygon:switch(b.type){case c.polygon:return this.polygon_polygon(a,b);case c.circle:return this.polygon_circle(a,b)}break;case c.circle:switch(b.type){case c.circle:return this.circle_circle(a,b)}}},point_point:function(a,b){return a.points[0].eql(b.points[0])?{success:!0,points:[a]}:{success:!1,points:null}},point_linseg:function(a,b){return 1>=b.edges[0].line.distanceFrom(a.points[0])&&this.point_between_points(a.points[0],b.points[0],b.points[1])?{success:!0,points:[a.points[0]]}:
{success:!1,points:null}},point_polygon:function(a,b){"undefined"!=typeof a.points&&(a=a.points[0]);for(var c=$V([b.boundingRect.x-1,a.e(2),0]),c={line:$L(c,a.subtract(c).toUnitVector())},d=0,e=[],f=0;f<b.edges.length;f++){var g=this.line_lineseg(c,b.edges[f]);if(g.success&&g.points[0].e(1)<=a.e(1)){for(var h=0;h<e.length;h++)if(.01>e[h].distanceFrom(g.points[0])){g.success=!1;break}g.success&&(e.push(g.points[0]),d++)}}return d%2?{success:!0,points:[a]}:{success:!1,points:null}},point_circle:function(a,
b){return a.points[0].distanceFrom(b.points[0])<=b.radius?{success:!0,points:[a.points[0]]}:{success:!1,points:null}},line_lineseg:function(a,b){var c=a.line.intersectionWith(b.line);return null!=c&&this.point_between_points(c,b.points[0],b.points[1])?{success:!0,points:[c]}:{success:!1,points:null}},lineseg_lineseg:function(a,b){var c=a,d=b;"undefined"!=typeof a.edges&&(c=a.edges[0]);"undefined"!=typeof b.edges&&(d=b.edges[0]);var e=c.line.intersectionWith(d.line);if(null!=e){e.round();var f=this.point_between_points(e,
c.points[0],c.points[1]),g=this.point_between_points(e,d.points[0],d.points[1])}return null!=e&&f&&g?{success:!0,points:[e]}:{success:!1,points:null}},lineseg_polygon:function(a,b){for(var c=null,d=!1,e=[],f=0;f<b.edges.length;f++)c=this.lineseg_lineseg(a,b.edges[f]),c.success&&(d=!0,e=e.concat(c.points));d||(c=this.point_polygon(a.points[0],b),d=c.success);d||(c=this.point_polygon(a.points[1],b),d=c.success);return d?{success:!0,points:e}:{success:!1,points:null}},lineseg_circle:function(a,b){var c=
this.point_relation_to_lineseg(b.center,a);if(c.distance<=b.radius){var d=[],e=c.extra.nearestPoint,c=c.extra.nearestDistance,f=Math.sqrt(Math.pow(b.radius,2)-Math.pow(c,2)),g=a.line;"undefined"!=typeof a.edges&&(g=a.edges[0].line);c=e.add(g.direction.multiply(f));e=e.subtract(g.direction.multiply(f));this.point_between_points(c,a.points[0],a.points[1])&&d.push(c);this.point_between_points(e,a.points[0],a.points[1])&&d.push(e);return{success:!0,points:d}}return{success:!1,points:null}},polygon_polygon:function(a,
b){for(var c=null,d=!1,e=[],f=0;f<a.edges.length;f++)c=this.lineseg_polygon(a.edges[f],b),c.success&&(d=!0,e=e.concat(c.points));return d?{success:!0,points:e}:{success:!1,points:null}},polygon_circle:function(a,b){for(var c=null,d=!1,e=[],f=0;f<a.edges.length;f++)c=this.lineseg_circle(a.edges[f],b),c.success&&(d=!0,e=e.concat(c.points));d||(c=this.point_polygon(b.center,a),c.success&&(d=!0));return d?{success:!0,points:e}:{success:!1,points:null}},circle_circle:function(a,b){var c=a.radius+b.radius,
d=a.center.distanceFrom(b.center);if(d<=c){var c=[],e=$L(a.center,b.center.subtract(a.center).toUnitVector()),d=(Math.pow(d,2)-Math.pow(a.radius,2)+Math.pow(b.radius,2))/(2*d);if(Math.abs(d)<b.radius){var d=b.center.subtract(e.direction.multiply(d)),e=$L(d,e.direction.rotate(Math.PI/2,$L($V([0,0,0]),$V([0,0,1])))),f=d.distanceFrom(a.center),g=Math.sqrt(Math.pow(a.radius,2)-Math.pow(f,2)),f=d.add(e.direction.multiply(g)),d=d.subtract(e.direction.multiply(g));c.push(f);c.push(d)}return{success:!0,points:c}}return{success:!1,
points:null}},point_between_points:function(a,b,c){if(a.e(1)>=b.e(1)&&a.e(1)<=c.e(1)||a.e(1)<=b.e(1)&&a.e(1)>=c.e(1))if(a.e(2)>=b.e(2)&&a.e(2)<=c.e(2)||a.e(2)<=b.e(2)&&a.e(2)>=c.e(2))return!0;return!1},point_relation_to_lineseg:function(a,b){var c=b;"undefined"!=typeof c.edges&&(c=b.edges[0]);var d=c.line.pointClosestTo(a),e=d.distanceFrom(a),d=d.round();if(this.point_between_points(d,c.points[0],c.points[1]))return{distance:e,extra:{nearestPoint:d,nearestDistance:e}};var f=a.distanceFrom(c.points[0]),
c=a.distanceFrom(c.points[1]);return{distance:Math.min(f,c),extra:{nearestPoint:d,nearestDistance:e}}}};